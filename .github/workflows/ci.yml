name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"

jobs:
  # Security and compliance checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety

      - name: Run Bandit security scan
        run: bandit -c pyproject.toml -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload Bandit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: bandit-report.json

      - name: Run Safety dependency scan
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Upload Safety results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-results
          path: safety-report.json

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Check code formatting with Black
        run: black --check --diff src/ tests/

      - name: Check import sorting with isort
        run: isort --check-only --diff src/ tests/

      - name: Lint with flake8
        run: flake8 src/ tests/

      - name: Type check with mypy
        run: mypy src/

      - name: Check docstring style with pydocstyle
        run: pydocstyle --convention=google src/
        continue-on-error: true

  # Test matrix across Python versions
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for resource efficiency
          - os: macos-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.8"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run unit tests
        run: |
          pytest tests/ \
            --verbose \
            --cov=py_superops \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=pytest-results.xml \
            -m "not integration and not slow"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            pytest-results.xml
            htmlcov/
            .coverage

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          file: coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # Integration tests (separate job for better isolation)
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run integration tests
        run: |
          pytest tests/ \
            --verbose \
            --cov=py_superops \
            --cov-report=xml \
            --junitxml=pytest-integration-results.xml \
            -m "integration"
        env:
          # Add any required environment variables for integration tests
          SUPEROPS_API_KEY: ${{ secrets.SUPEROPS_API_KEY }}
          SUPEROPS_API_URL: ${{ secrets.SUPEROPS_API_URL }}

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            pytest-integration-results.xml
            coverage.xml

  # Build and packaging verification
  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [security, code-quality]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build distribution packages
        run: python -m build

      - name: Check distribution packages
        run: |
          twine check dist/*
          python -m pip install dist/*.whl
          python -c "import py_superops; print(f'Version: {py_superops.__version__}')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/

  # Documentation build (if docs exist)
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: hashFiles('docs/**') != ''

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[docs]

      - name: Build documentation
        run: |
          cd docs
          make html

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/

  # Performance benchmarks (optional)
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install pytest-benchmark

      - name: Run benchmarks
        run: |
          pytest tests/ \
            -m benchmark \
            --benchmark-only \
            --benchmark-json=benchmark-results.json
        continue-on-error: true

      - name: Upload benchmark results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.json

  # Summary job for required checks
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [security, code-quality, test, build]
    if: always()

    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "Security checks failed"
            exit 1
          fi
          if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
            echo "Code quality checks failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Tests failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "Build failed"
            exit 1
          fi
          echo "All required checks passed!"
